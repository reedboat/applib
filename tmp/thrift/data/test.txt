  

上回说到了用经纬度范围实现附近地点搜索。一些小型应用中这样做没问题，但在大型应用中它有个显著的缺点：速度慢。慢的原因有两个，第一是范围比较的索引利用率并不高，第二是SQL语句极其不稳定(不同的当前位置会产生完全不同的SQL查询)，很难缓存。

可以考虑使用geohash算法。

geohash是一种地址编码，它能把二维的经纬度编码成一维的字符串。比如，北海公园的编码是wx4g0ec1。

geohash有以下几个特点：

首先，geohash用一个字符串表示经度和纬度两个坐标。某些情况下无法在两列上同时应用索引（例如MySQL
4之前的版本，Google App
Engine的数据层等），利用geohash，只需在一列上应用索引即可。

其次，geohash表示的并不是一个点，而是一个矩形区域。比如编码wx4g0ec19，它表示的是一个矩形区域。使用者可以发布地址编码，既能表明自己位于北海公园附近，又不至于暴露自己的精确坐标，有助于隐私保护。

第三，编码的前缀可以表示更大的区域。例如wx4g0ec1，它的前缀wx4g0e表示包含编码wx4g0ec1在内的更大范围。这个特性可以用于附近地点搜索。首先根据用户当前坐标计算geohash（例如wx4g0ec1）然后取其前缀进行查询（SELECT
* FROM place WHERE geohash LIKE 'wx4g0e%'），即可查询附近的所有地点。
geohash的算法

下面以(39.92324, 116.3906)为例，介绍一下geohash的编码算法。首先将纬度范围(-90,
90)平分成两个区间(-90, 0)、(0,
90)，如果目标纬度位于前一个区间，则编码为0，否则编码为1。由于39.92324属于(0,
90)，所以取编码为1。然后再将(0, 90)分成 (0, 45), (45,
90)两个区间，而39.92324位于(0,
45)，所以编码为0。以此类推，直到精度符合要求为止，得到纬度编码为1011 1000 1100
0111 1001。
纬度范围	划分区间0	划分区间1	39.92324所属区间
