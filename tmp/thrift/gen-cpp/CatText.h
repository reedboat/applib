/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CatText_H
#define CatText_H

#include <thrift/TDispatchProcessor.h>
#include "Cat_types.h"



class CatTextIf {
 public:
  virtual ~CatTextIf() {}
  virtual void LoadResource() = 0;
  virtual int64_t CatNumber(const std::string& doc) = 0;
  virtual void CatName(std::string& _return, const std::string& doc) = 0;
  virtual void TextFeature(std::string& _return, const std::string& doc) = 0;
};

class CatTextIfFactory {
 public:
  typedef CatTextIf Handler;

  virtual ~CatTextIfFactory() {}

  virtual CatTextIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CatTextIf* /* handler */) = 0;
};

class CatTextIfSingletonFactory : virtual public CatTextIfFactory {
 public:
  CatTextIfSingletonFactory(const boost::shared_ptr<CatTextIf>& iface) : iface_(iface) {}
  virtual ~CatTextIfSingletonFactory() {}

  virtual CatTextIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CatTextIf* /* handler */) {}

 protected:
  boost::shared_ptr<CatTextIf> iface_;
};

class CatTextNull : virtual public CatTextIf {
 public:
  virtual ~CatTextNull() {}
  void LoadResource() {
    return;
  }
  int64_t CatNumber(const std::string& /* doc */) {
    int64_t _return = 0;
    return _return;
  }
  void CatName(std::string& /* _return */, const std::string& /* doc */) {
    return;
  }
  void TextFeature(std::string& /* _return */, const std::string& /* doc */) {
    return;
  }
};


class CatText_LoadResource_args {
 public:

  CatText_LoadResource_args() {
  }

  virtual ~CatText_LoadResource_args() throw() {}


  bool operator == (const CatText_LoadResource_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CatText_LoadResource_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CatText_LoadResource_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CatText_LoadResource_pargs {
 public:


  virtual ~CatText_LoadResource_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CatText_LoadResource_result {
 public:

  CatText_LoadResource_result() {
  }

  virtual ~CatText_LoadResource_result() throw() {}


  bool operator == (const CatText_LoadResource_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CatText_LoadResource_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CatText_LoadResource_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CatText_LoadResource_presult {
 public:


  virtual ~CatText_LoadResource_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CatText_CatNumber_args__isset {
  _CatText_CatNumber_args__isset() : doc(false) {}
  bool doc;
} _CatText_CatNumber_args__isset;

class CatText_CatNumber_args {
 public:

  CatText_CatNumber_args() : doc() {
  }

  virtual ~CatText_CatNumber_args() throw() {}

  std::string doc;

  _CatText_CatNumber_args__isset __isset;

  void __set_doc(const std::string& val) {
    doc = val;
  }

  bool operator == (const CatText_CatNumber_args & rhs) const
  {
    if (!(doc == rhs.doc))
      return false;
    return true;
  }
  bool operator != (const CatText_CatNumber_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CatText_CatNumber_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CatText_CatNumber_pargs {
 public:


  virtual ~CatText_CatNumber_pargs() throw() {}

  const std::string* doc;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CatText_CatNumber_result__isset {
  _CatText_CatNumber_result__isset() : success(false) {}
  bool success;
} _CatText_CatNumber_result__isset;

class CatText_CatNumber_result {
 public:

  CatText_CatNumber_result() : success(0) {
  }

  virtual ~CatText_CatNumber_result() throw() {}

  int64_t success;

  _CatText_CatNumber_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const CatText_CatNumber_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CatText_CatNumber_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CatText_CatNumber_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CatText_CatNumber_presult__isset {
  _CatText_CatNumber_presult__isset() : success(false) {}
  bool success;
} _CatText_CatNumber_presult__isset;

class CatText_CatNumber_presult {
 public:


  virtual ~CatText_CatNumber_presult() throw() {}

  int64_t* success;

  _CatText_CatNumber_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CatText_CatName_args__isset {
  _CatText_CatName_args__isset() : doc(false) {}
  bool doc;
} _CatText_CatName_args__isset;

class CatText_CatName_args {
 public:

  CatText_CatName_args() : doc() {
  }

  virtual ~CatText_CatName_args() throw() {}

  std::string doc;

  _CatText_CatName_args__isset __isset;

  void __set_doc(const std::string& val) {
    doc = val;
  }

  bool operator == (const CatText_CatName_args & rhs) const
  {
    if (!(doc == rhs.doc))
      return false;
    return true;
  }
  bool operator != (const CatText_CatName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CatText_CatName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CatText_CatName_pargs {
 public:


  virtual ~CatText_CatName_pargs() throw() {}

  const std::string* doc;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CatText_CatName_result__isset {
  _CatText_CatName_result__isset() : success(false) {}
  bool success;
} _CatText_CatName_result__isset;

class CatText_CatName_result {
 public:

  CatText_CatName_result() : success() {
  }

  virtual ~CatText_CatName_result() throw() {}

  std::string success;

  _CatText_CatName_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const CatText_CatName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CatText_CatName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CatText_CatName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CatText_CatName_presult__isset {
  _CatText_CatName_presult__isset() : success(false) {}
  bool success;
} _CatText_CatName_presult__isset;

class CatText_CatName_presult {
 public:


  virtual ~CatText_CatName_presult() throw() {}

  std::string* success;

  _CatText_CatName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CatText_TextFeature_args__isset {
  _CatText_TextFeature_args__isset() : doc(false) {}
  bool doc;
} _CatText_TextFeature_args__isset;

class CatText_TextFeature_args {
 public:

  CatText_TextFeature_args() : doc() {
  }

  virtual ~CatText_TextFeature_args() throw() {}

  std::string doc;

  _CatText_TextFeature_args__isset __isset;

  void __set_doc(const std::string& val) {
    doc = val;
  }

  bool operator == (const CatText_TextFeature_args & rhs) const
  {
    if (!(doc == rhs.doc))
      return false;
    return true;
  }
  bool operator != (const CatText_TextFeature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CatText_TextFeature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CatText_TextFeature_pargs {
 public:


  virtual ~CatText_TextFeature_pargs() throw() {}

  const std::string* doc;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CatText_TextFeature_result__isset {
  _CatText_TextFeature_result__isset() : success(false) {}
  bool success;
} _CatText_TextFeature_result__isset;

class CatText_TextFeature_result {
 public:

  CatText_TextFeature_result() : success() {
  }

  virtual ~CatText_TextFeature_result() throw() {}

  std::string success;

  _CatText_TextFeature_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const CatText_TextFeature_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CatText_TextFeature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CatText_TextFeature_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CatText_TextFeature_presult__isset {
  _CatText_TextFeature_presult__isset() : success(false) {}
  bool success;
} _CatText_TextFeature_presult__isset;

class CatText_TextFeature_presult {
 public:


  virtual ~CatText_TextFeature_presult() throw() {}

  std::string* success;

  _CatText_TextFeature_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CatTextClient : virtual public CatTextIf {
 public:
  CatTextClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CatTextClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void LoadResource();
  void send_LoadResource();
  void recv_LoadResource();
  int64_t CatNumber(const std::string& doc);
  void send_CatNumber(const std::string& doc);
  int64_t recv_CatNumber();
  void CatName(std::string& _return, const std::string& doc);
  void send_CatName(const std::string& doc);
  void recv_CatName(std::string& _return);
  void TextFeature(std::string& _return, const std::string& doc);
  void send_TextFeature(const std::string& doc);
  void recv_TextFeature(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CatTextProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CatTextIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CatTextProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_LoadResource(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CatNumber(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CatName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TextFeature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CatTextProcessor(boost::shared_ptr<CatTextIf> iface) :
    iface_(iface) {
    processMap_["LoadResource"] = &CatTextProcessor::process_LoadResource;
    processMap_["CatNumber"] = &CatTextProcessor::process_CatNumber;
    processMap_["CatName"] = &CatTextProcessor::process_CatName;
    processMap_["TextFeature"] = &CatTextProcessor::process_TextFeature;
  }

  virtual ~CatTextProcessor() {}
};

class CatTextProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CatTextProcessorFactory(const ::boost::shared_ptr< CatTextIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CatTextIfFactory > handlerFactory_;
};

class CatTextMultiface : virtual public CatTextIf {
 public:
  CatTextMultiface(std::vector<boost::shared_ptr<CatTextIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CatTextMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CatTextIf> > ifaces_;
  CatTextMultiface() {}
  void add(boost::shared_ptr<CatTextIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void LoadResource() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LoadResource();
    }
    ifaces_[i]->LoadResource();
  }

  int64_t CatNumber(const std::string& doc) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CatNumber(doc);
    }
    return ifaces_[i]->CatNumber(doc);
  }

  void CatName(std::string& _return, const std::string& doc) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CatName(_return, doc);
    }
    ifaces_[i]->CatName(_return, doc);
    return;
  }

  void TextFeature(std::string& _return, const std::string& doc) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TextFeature(_return, doc);
    }
    ifaces_[i]->TextFeature(_return, doc);
    return;
  }

};



#endif
