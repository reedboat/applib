// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "./CatTextServer.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class CatTextHandler : virtual public CatTextIf {
 public:
  CatTextHandler() {
      LoadResource();
  }

  void LoadResource() {
      string fileName="config/centoriod.cfg";
      knn.Init(fileName);
  }

  int32_t CatNumber(const std::string& doc) {
      return knn.Predict(doc);
  }

  void CatName(std::string& _return, const std::string& doc) {
      float score=knn.Predict(doc,_return);
      SuperString SS;

      if(_return.length()==0)
          _return="Null";

      string strScore;
      strScore=SS.FtoS(score);
      _return+="\t";
      _return+=strScore;
  }

  void TextFeature(std::string& _return, const std::string& doc) {
    // Your implementation goes here
    printf("TextFeature\n");
    vector<string> feature;
    knn.Text2FeatureWords(doc, feature);
    SuperString ss;

    _return="";
    vector<string>::iterator dit;
    for(dit=feature.begin();dit!=feature.end();dit++){
        _return +=" ";
        _return += *dit;
    }
  }

	private:
      KNN knn;//category
};

int main(int argc, char **argv) {
  int port = 9092;
  if (argc==2){
      stringstream ss(argv[1]); 
      ss >> port;
  }
  shared_ptr<CatTextHandler> handler(new CatTextHandler());
  shared_ptr<TProcessor> processor(new CatTextProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  printf("Starting the server...\n");
  server.serve();
  printf("done.\n");
  return 0;
}

